// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id         String  @id @default(uuid()) @db.Uuid
  name       String
  ai_api_keys Json?

  // Relations
  users      User[]
  projects   Project[]
  ai_prompts AIPrompt[]

  @@map("tenants")
}

model User {
  id           String @id @default(uuid()) @db.Uuid
  username     String
  password_hash String
  tenant_id    String @db.Uuid

  // Relations
  tenant       Tenant @relation(fields: [tenant_id], references: [id])

  // Username must be unique within tenant scope
  @@unique([username, tenant_id])
  @@map("users")
}

model Project {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(255)
  domain    String?  @db.VarChar(255)
  tenant_id String   @db.Uuid
  default_region String @default("UK") @db.VarChar(5)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  tenant    Tenant @relation(fields: [tenant_id], references: [id])
  pages     Page[]
  keyword_lists KeywordList[]

  // Project names must be unique within tenant scope
  @@unique([name, tenant_id])
  @@map("projects")
}

model Page {
  id         String   @id @default(uuid()) @db.Uuid
  url        String?  @db.Text
  title      String?  @db.VarChar(500)
  content    String   @db.Text
  project_id String   @db.Uuid
  analysis_status Json?
  created_at DateTime @default(now())

  // Relations
  project    Project @relation(fields: [project_id], references: [id])
  keyword_lists KeywordList[]

  @@map("pages")
}

model AIPrompt {
  id          String   @id @default(uuid()) @db.Uuid
  tenant_id   String   @db.Uuid
  name        String   @db.VarChar(255)
  prompt_text String   @db.Text
  ai_model    String   @db.VarChar(100)
  prompt_type String   @db.VarChar(50) @default("keyword_generation")
  is_default  Boolean  @default(false)
  is_enabled  Boolean  @default(true)
  created_at  DateTime @default(now())

  // Relations
  tenant      Tenant @relation(fields: [tenant_id], references: [id])

  @@map("ai_prompts")
}

model KeywordList {
  id          String   @id @default(uuid()) @db.Uuid
  project_id  String   @db.Uuid
  page_id     String?  @db.Uuid
  name        String   @db.VarChar(255)
  region      String?  @db.VarChar(5)
  generated_at DateTime @default(now())
  created_at  DateTime @default(now())

  // Relations
  project     Project @relation(fields: [project_id], references: [id])
  page        Page?   @relation(fields: [page_id], references: [id])
  keywords    Keyword[]

  @@map("keyword_lists")
}

model Keyword {
  id              String   @id @default(uuid()) @db.Uuid
  keyword_list_id String   @db.Uuid
  text            String   @db.VarChar(255)
  search_volume   Int?
  difficulty      Float?
  region          String?  @db.VarChar(5)
  external_tool_data Json?
  created_at      DateTime @default(now())

  // Relations
  keyword_list    KeywordList @relation(fields: [keyword_list_id], references: [id])

  @@map("keywords")
}
